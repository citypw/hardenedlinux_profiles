diff --git a/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_ibex_ibex_core_0.1/rtl/ibex_id_stage.sv b/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_ibex_ibex_core_0.1/rtl/ibex_id_stage.sv
index 57ba306..be8dff1 100644
--- a/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_ibex_ibex_core_0.1/rtl/ibex_id_stage.sv
+++ b/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_ibex_ibex_core_0.1/rtl/ibex_id_stage.sv
@@ -955,7 +955,7 @@ module ibex_id_stage #(
   ////////////////
   // Assertions //
   ////////////////
-
+/*
   // Selectors must be known/valid.
   `ASSERT_KNOWN_IF(IbexAluOpMuxSelKnown, alu_op_a_mux_sel, instr_valid_i)
   `ASSERT(IbexAluAOpMuxSelValid, instr_valid_i |-> alu_op_a_mux_sel inside {
@@ -1018,5 +1018,5 @@ module ibex_id_stage #(
   `ifdef CHECK_MISALIGNED
   `ASSERT(IbexMisalignedMemoryAccess, !lsu_addr_incr_req_i)
   `endif
-
+*/
 endmodule
diff --git a/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_ibex_ibex_tracer_0.1/rtl/ibex_tracer.sv b/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_ibex_ibex_tracer_0.1/rtl/ibex_tracer.sv
index b270ac9..534b994 100644
--- a/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_ibex_ibex_tracer_0.1/rtl/ibex_tracer.sv
+++ b/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_ibex_ibex_tracer_0.1/rtl/ibex_tracer.sv
@@ -62,7 +62,7 @@ module ibex_tracer (
   input logic [31:0] rvfi_mem_rdata,
   input logic [31:0] rvfi_mem_wdata
 );
-
+/*
   // These signals are part of RVFI, but not used in this module currently.
   // Keep them as part of the interface to change the tracer more easily in the future. Assigning
   // these signals to unused_* signals marks them explicitly as unused, an annotation picked up by
@@ -624,23 +624,6 @@ module ibex_tracer (
   function automatic void decode_load_insn();
     string      mnemonic;
 
-    /*
-    Gives wrong results in Verilator < 4.020.
-    See https://github.com/lowRISC/ibex/issues/372 and
-    https://www.veripool.org/issues/1536-Verilator-Misoptimization-in-if-and-case-with-default-statement-inside-a-function
-
-    unique case (rvfi_insn[14:12])
-      3'b000: mnemonic = "lb";
-      3'b001: mnemonic = "lh";
-      3'b010: mnemonic = "lw";
-      3'b100: mnemonic = "lbu";
-      3'b101: mnemonic = "lhu";
-      default: begin
-        decode_mnemonic("INVALID");
-        return;
-      end
-    endcase
-    */
     logic [2:0] size;
     size = rvfi_insn[14:12];
     if (size == 3'b000) begin
@@ -910,5 +893,5 @@ module ibex_tracer (
       endcase
     end
   end
-
+*/
 endmodule
diff --git a/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_ip_hmac_0.1/rtl/hmac_pkg.sv b/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_ip_hmac_0.1/rtl/hmac_pkg.sv
index c93eae2..b61ba91 100644
--- a/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_ip_hmac_0.1/rtl/hmac_pkg.sv
+++ b/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_ip_hmac_0.1/rtl/hmac_pkg.sv
@@ -48,8 +48,7 @@ package hmac_pkg;
   };
 
   function automatic sha_word_t conv_endian( input sha_word_t v, input logic swap);
-    sha_word_t conv_data = {<<8{v}};
-    conv_endian = (swap) ? conv_data : v ;
+    conv_endian = (swap) ? {v[7:0], v[15:8], v[23:16], v[31:24]} : v ;
   endfunction : conv_endian
 
   function automatic sha_word_t rotr( input sha_word_t v , input int amt );
diff --git a/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_prim_all_0.1/rtl/prim_alert_receiver.sv b/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_prim_all_0.1/rtl/prim_alert_receiver.sv
index f8954b8..fc09dd7 100644
--- a/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_prim_all_0.1/rtl/prim_alert_receiver.sv
+++ b/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_prim_all_0.1/rtl/prim_alert_receiver.sv
@@ -171,7 +171,7 @@ module prim_alert_receiver
   ////////////////
   // assertions //
   ////////////////
-
+/*
   // check whether all outputs have a good known state after reset
   `ASSERT_KNOWN(PingOkKnownO_A, ping_ok_o)
   `ASSERT_KNOWN(IntegFailKnownO_A, integ_fail_o)
@@ -210,5 +210,5 @@ module prim_alert_receiver
     `ASSERT(Alert_A, ##1 $rose(alert_tx_i.alert_p) && state_q == Idle && !ping_pending_q |->
         alert_o, clk_i, !rst_ni || integ_fail_o)
   end
-
+*/
 endmodule : prim_alert_receiver
diff --git a/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_prim_all_0.1/rtl/prim_alert_sender.sv b/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_prim_all_0.1/rtl/prim_alert_sender.sv
index faa242a..17cc670 100644
--- a/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_prim_all_0.1/rtl/prim_alert_sender.sv
+++ b/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_prim_all_0.1/rtl/prim_alert_sender.sv
@@ -191,7 +191,7 @@ module prim_alert_sender
   ////////////////
   // assertions //
   ////////////////
-
+/*
   // check whether all outputs have a good known state after reset
   `ASSERT_KNOWN(AlertPKnownO_A, alert_tx_o)
 
@@ -232,5 +232,5 @@ module prim_alert_sender
   // if alert_i is true, handshakes should be continuously repeated
   `ASSERT(AlertHs_A, alert_i && state_q == Idle |=> $rose(alert_tx_o.alert_p),
       clk_i, !rst_ni || (alert_tx_o.alert_p == alert_tx_o.alert_n))
-
+*/
 endmodule : prim_alert_sender
diff --git a/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_prim_all_0.1/rtl/prim_cipher_pkg.sv b/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_prim_all_0.1/rtl/prim_cipher_pkg.sv
index 15df258..6b7a107 100644
--- a/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_prim_all_0.1/rtl/prim_cipher_pkg.sv
+++ b/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_prim_all_0.1/rtl/prim_cipher_pkg.sv
@@ -41,7 +41,7 @@ package prim_cipher_pkg;
                                                           4'h7, 4'hA, 4'hD, 4'h0};
 
   // these are the round constants
-  parameter logic [11:0][63:0] PRINCE_ROUND_CONST = {64'hC0AC29B7C97C50DD,
+  parameter logic [767:0] PRINCE_ROUND_CONST = {64'hC0AC29B7C97C50DD,
                                                      64'hD3B5A399CA0C2399,
                                                      64'h64A51195E0E3610D,
                                                      64'hC882D32F25323C54,
diff --git a/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_prim_all_0.1/rtl/prim_lfsr.sv b/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_prim_all_0.1/rtl/prim_lfsr.sv
index 68481bc..e4d4a54 100644
--- a/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_prim_all_0.1/rtl/prim_lfsr.sv
+++ b/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_prim_all_0.1/rtl/prim_lfsr.sv
@@ -299,7 +299,7 @@ module prim_lfsr #(
   ////////////////
   // Galois XOR //
   ////////////////
-  if (64'(LfsrType) == 64'("GAL_XOR")) begin : gen_gal_xor
+  if (LfsrType == "GAL_XOR") begin : gen_gal_xor
 
     // if custom polynomial is provided
     if (CustomCoeffs > 0) begin : gen_custom
@@ -324,7 +324,7 @@ module prim_lfsr #(
   ////////////////////
   // Fibonacci XNOR //
   ////////////////////
-  end else if (64'(LfsrType) == "FIB_XNOR") begin : gen_fib_xnor
+  end else if (LfsrType == "FIB_XNOR") begin : gen_fib_xnor
 
     // if custom polynomial is provided
     if (CustomCoeffs > 0) begin : gen_custom
@@ -389,7 +389,7 @@ module prim_lfsr #(
     logic state0;
 
     // Galois XOR
-    if (64'(LfsrType) == 64'("GAL_XOR")) begin
+    if (LfsrType == "GAL_XOR") begin
       if (state == 0) begin
         state = DefaultSeed;
       end else begin
@@ -399,7 +399,7 @@ module prim_lfsr #(
         state ^= LfsrDw'(entropy);
       end
     // Fibonacci XNOR
-    end else if (64'(LfsrType) == "FIB_XNOR") begin
+    end else if (LfsrType == "FIB_XNOR") begin
       if (&state) begin
         state = DefaultSeed;
       end else begin
@@ -433,7 +433,7 @@ module prim_lfsr #(
   // if no external input changes the lfsr state, a lockup must not occur (by design)
   //`ASSERT(NoLockups_A, (!entropy_i) && (!seed_en_i) |=> !lockup, clk_i, !rst_ni)
   `ASSERT(NoLockups_A, lfsr_en_i && !entropy_i && !seed_en_i |=> !lockup)
-
+/*
   // this can be disabled if unused in order to not distort coverage
   if (ExtSeedSVA) begin : gen_ext_seed_sva
     // check that external seed is correctly loaded into the state
@@ -441,15 +441,16 @@ module prim_lfsr #(
     // in disable_iff is unsampled.  See #1985 for more details
     `ASSERT(ExtDefaultSeedInputCheck_A, (seed_en_i && rst_ni) |=> lfsr_q == $past(seed_i))
   end
+*/
 
   // if the external seed mechanism is not used,
   // there is theoretically no way we end up in a lockup condition
   // in order to not distort coverage, this SVA can be disabled in such cases
-  if (LockupSVA) begin : gen_lockup_mechanism_sva
+/*  if (LockupSVA) begin : gen_lockup_mechanism_sva
     // check that a stuck LFSR is correctly reseeded
     `ASSERT(LfsrLockupCheck_A, lfsr_en_i && lockup && !seed_en_i |=> !lockup)
-  end
-
+  end*/
+/*
   if (MaxLenSVA) begin : gen_max_len_sva
 
 `ifndef SYNTHESIS
@@ -483,5 +484,5 @@ module prim_lfsr #(
     `ASSERT(MaximalLengthCheck1_A, cnt_q != 0 |-> lfsr_q != DefaultSeed,
         clk_i, !rst_ni || perturbed_q)
   end
-
+*/
 endmodule
diff --git a/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_prim_all_0.1/rtl/prim_prince.sv b/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_prim_all_0.1/rtl/prim_prince.sv
index bd5e50d..7a5ed57 100644
--- a/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_prim_all_0.1/rtl/prim_prince.sv
+++ b/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_prim_all_0.1/rtl/prim_prince.sv
@@ -78,7 +78,7 @@ module prim_prince #(
   always_comb begin : p_pre_round_xor
     data_state[0] = data_i ^ k0;
     data_state[0] ^= k1;
-    data_state[0] ^= prim_cipher_pkg::PRINCE_ROUND_CONST[0][DataWidth-1:0];
+    data_state[0] ^= prim_cipher_pkg::PRINCE_ROUND_CONST[0 * 64 + DataWidth-1: 0 * 64 + 0];
   end
 
   // forward pass
@@ -103,7 +103,7 @@ module prim_prince #(
     end
     logic [DataWidth-1:0] data_state_xor;
     assign data_state_xor = data_state_round ^
-                            prim_cipher_pkg::PRINCE_ROUND_CONST[k][DataWidth-1:0];
+                            prim_cipher_pkg::PRINCE_ROUND_CONST[k * 64 + DataWidth - 1:k * 64 + 0];
     // improved keyschedule proposed by https://eprint.iacr.org/2014/656.pdf
     if (k % 2 == 1) assign data_state[k]  = data_state_xor ^ k0_new;
     else            assign data_state[k]  = data_state_xor ^ k1;
@@ -139,7 +139,7 @@ module prim_prince #(
     else            assign data_state_xor0 = data_state[NumRoundsHalf+k] ^ k1;
     // the construction is reflective, hence the subtraction with NumRoundsHalf
     assign data_state_xor1 = data_state_xor0 ^
-                             prim_cipher_pkg::PRINCE_ROUND_CONST[10-NumRoundsHalf+k][DataWidth-1:0];
+                             prim_cipher_pkg::PRINCE_ROUND_CONST[(10 - NumRoundsHalf + k) * 64 + DataWidth - 1 : (10 - NumRoundsHalf + k) * 64 + 0];
 
     logic [DataWidth-1:0] data_state_bwd;
     if (DataWidth == 64) begin : gen_bwd_d64
@@ -164,7 +164,7 @@ module prim_prince #(
   // post-rounds
   always_comb begin : p_post_round_xor
     data_o  = data_state[2*NumRoundsHalf+1] ^
-              prim_cipher_pkg::PRINCE_ROUND_CONST[11][DataWidth-1:0];
+              prim_cipher_pkg::PRINCE_ROUND_CONST[11 * 64 + DataWidth - 1: 11 * 64 + 0];
     data_o ^= k1;
     data_o ^= k0_prime;
   end
diff --git a/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_prim_diff_decode_0/rtl/prim_diff_decode.sv b/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_prim_diff_decode_0/rtl/prim_diff_decode.sv
index 3a1c27a..89b127d 100644
--- a/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_prim_diff_decode_0/rtl/prim_diff_decode.sv
+++ b/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_prim_diff_decode_0/rtl/prim_diff_decode.sv
@@ -207,7 +207,7 @@ module prim_diff_decode #(
   ////////////////
   // assertions //
   ////////////////
-
+/*
   // shared assertions
   // sigint -> level stays the same during sigint
   // $isunknown is needed to avoid false assertion in first clock cycle
@@ -256,5 +256,5 @@ module prim_diff_decode #(
     // correctly detect level
     `ASSERT(LevelCheck_A, (diff_pi ^ diff_ni) |-> diff_pi == level_o)
   end
-
+*/
 endmodule : prim_diff_decode
diff --git a/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_prim_generic_pad_wrapper_0/rtl/prim_generic_pad_wrapper.sv b/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_prim_generic_pad_wrapper_0/rtl/prim_generic_pad_wrapper.sv
index ca1dc9f..acb58d4 100644
--- a/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_prim_generic_pad_wrapper_0/rtl/prim_generic_pad_wrapper.sv
+++ b/lowrisc_systems_top_earlgrey_verilator_0.1/src/lowrisc_prim_generic_pad_wrapper_0/rtl/prim_generic_pad_wrapper.sv
@@ -31,7 +31,7 @@ module prim_generic_pad_wrapper #(
   logic oe, out;
   assign out      = out_i ^ inv;
   assign oe       = oe_i & ((od & ~out) | ~od);
-
+/*
 // driving strength attributes are not supported by verilator
 `ifdef VERILATOR
   assign inout_io = (oe) ? out : 1'bz;
@@ -45,7 +45,7 @@ module prim_generic_pad_wrapper #(
   // fake trireg emulation
   assign (weak0, weak1)     inout_io = (kp) ? inout_io : 1'bz;
 `endif
-
+*/
   // assertions
   `ASSERT_INIT(AttrDwCheck_A, AttrDw >= 7)
 
